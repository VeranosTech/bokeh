# SOME DESCRIPTIVE TITLE.
# Copyright (C) Â© Copyright 2015-2018, Anaconda and Bokeh Contributors.
# This file is distributed under the same license as the Bokeh package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Bokeh 1.1.0dev12-5-g50b404880\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-29 15:17+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/docs/user_guide/interaction/callbacks.rst:4
msgid "JavaScript Callbacks"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:6
msgid ""
"While the main goal of Bokeh is to provide a path to create rich "
"interactive visualizations in the browser, purely from python, there will"
" always be specialized use-cases that are outside the capabilities of the"
" core library. For this reason, Bokeh provides different ways for users "
"to supply custom JavaScript when necessary, so that users may add custom "
"or specialized behaviours in response to property changes and other "
"events."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:13
msgid ""
"One mechanism is the ability to add entire new custom extension models, "
"as described in :ref:`userguide_extensions`. However it is also possible "
"to supply small snippets of JavaScript as callbacks to use, e.g when "
"property values change, or when UI or other events occur. This kind of "
"callback can be used to add interesting interactions to Bokeh documents "
"without the need to use a Bokeh server (but can also be used in "
"conjunction with a Bokeh server)."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:21
msgid ""
"The explicit purpose of these callbacks is to embed *raw JavaScript code*"
" for a browser to execute. If any part of the code is derived from "
"untrusted user inputs, then you must take appropriate care to sanitize "
"the user input prior to passing to Bokeh."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:29
msgid "CustomJS Callbacks"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:31
msgid ""
"To supply a snippet of JavaScript code that should be executed (in the "
"browser) when some event occurs, use the ``CustomJS`` model:"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:53
msgid ""
"Note that in addition to the ``code`` property, ``CustomJS`` also accepts"
" an ``args`` property that maps string names to Bokeh models. Any Bokeh "
"models that are configured in ``args`` (on the \"Python side\") will "
"automatically be available to the JavaScript code by the corresponding "
"name. Additionally, the model that triggers the callback (i.e. the model "
"that the callback is attached to) will be available as ``cb_obj``."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:63
msgid "CustomJS for Model Property Events"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:65
msgid ""
"These ``CustomJS`` callbacks can be attached to property change events on"
" any Bokeh model, using the ``js_on_change`` method of Bokeh models:"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:75
msgid ""
"It should be mentioned that the first parameter to ``js_on_change`` is "
"actually the name of a BokehJS event. The full format for a property "
"change event is, e.g. ``\"change:start\"`` but Bokeh will automatically "
"convert any property name into one of these BokehJS change events for "
"you. Additionally, some Bokeh models have additional specialized events. "
"For example, the ``ColumnDataSource`` also supports ``\"patch\"`` and "
"``\"stream\"`` events, for executing ``CustomJS`` callbacks whenever the "
"data source is patched or streamed to."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:84
msgid ""
"Below is an example that shows how to attach a ``CustomJS`` callback to a"
" ``Slider`` widget, so that whenever the slider value updates, the "
"callback is executed to update some data:"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:94
msgid "CustomJS for User Interaction Events"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:96
msgid ""
"In addition to responding to property change events using js_on_change, "
"Bokeh allows CustomJS callbacks to be triggered by specific interaction "
"events with the plot canvas, on button click events, and on LOD events."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:100
msgid ""
"These event callbacks are defined on models using the js_on_event method,"
" with the callback receiving the event object as a locally defined cb_obj"
" variable:"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:118
msgid ""
"The event can be specified as a string such as ``'tap'`` above, or an "
"event class import from the ``bokeh.events`` module (i.e. ``from "
"bokeh.events import Tap``)."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:122
msgid ""
"The following code imports ``bokeh.events`` and registers all of the "
"available event classes using the ``display_event`` function in order to "
"generate the ``CustomJS`` objects. This function is used to update the "
"``Div`` with the event name (always accessible from the ``event_name`` "
"attribute) as well as all the other applicable event attributes. The "
"result is a plot that when interacted with, displays the corresponding "
"event on the right:"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:134
msgid "CustomJS for Specialized Events"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:136
msgid ""
"In addition to the generic mechanisms described above for adding "
"``CustomJS`` callbacks to Bokeh models, there are also a some Bokeh "
"models that have a ``.callback`` property specifically for executing "
"``CustomJS`` in response to specific events or situations."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:142
msgid ""
"The callbacks described below were added early to Bokeh in an ad-hoc "
"fashion. Many of them can be accomplished with the generic mechanism "
"described above, and as such, may be deprecated in favor of the generic "
"mechanism in the future."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:148
msgid "CustomJS for Widgets"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:150
msgid ""
"Bokeh lets you express even more advanced callbacks that must be called "
"on the Javascript side in order to add custom logic and interactivity "
"when a widget is used. For instance, we may want to change the data of a "
"plot when a user clicks on a button or changes a slider Widget."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:155
msgid ""
"Custom callbacks like these can be set using a CustomJS object and "
"passing it as the ``callback`` argument to a Widget object."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:158
msgid ""
"The code below shows an example of CustomJS set on a slider Widget that "
"changes the source of a plot when the slider is used."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:165
msgid "CustomJS for Tools"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:167
msgid ""
"Bokeh allows for some tool events to trigger custom Javascript callbacks "
"that have access to the tool's attributes. Below, a callback on the "
"BoxSelectTool uses the selection box dimensions (accessed in the geometry"
" field of the cb_data object that is injected into the Callback code "
"attribute), in order to add a Rect glyph to the plot with identical "
"dimensions."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:177
msgid "CustomJS for Selections"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:179
msgid ""
"Bokeh also provides the means to specify the same kind of callback to be "
"executed whenever a selection changes. As a simple demonstration, the "
"example below simply copies selected points on the first plot to the "
"second. However, more sophisticated actions and computations are easily "
"constructed in a similar way."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:188
msgid ""
"Another more sophisticated example is shown below. It computes the "
"average `y` value of any selected points (including multiple disjoint "
"selections), and draws a line through that value."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:196
msgid "CustomJS for Hover"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:198
msgid ""
"The ``HoverTool`` has a callback which comes with two pieces of built-in "
"data: the `index`, and the `geometry`. The `index` is the indices of any "
"points that the hover tool is over."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:206
msgid "CustomJS for Range Update"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:208
msgid ""
"With Bokeh, ranges have a callback attribute that accept a Callback "
"instance and execute Javascript code on range updates that are triggered "
"by tool interactions such as a box zoom, wheel scroll or pan."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:216
msgid "CustomJS with CoffeeScript code"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:218
msgid ""
"It is possible to write the code for ``CustomJS`` callbacks in "
"`CoffeeScript`_. To accomplish this, use the ``from_coffeescript`` class "
"method, which accepts the same ``args`` and ``code`` parameters:"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:229
msgid "CustomJS with a Python function"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:232
msgid ""
"Support for converting Python to JS is deprecated and all the "
"\"from_py_func\" functions will be removed in an eventual Bokeh 2.0 "
"release. Use CustomJS classes instead."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:236
msgid ""
"A CustomJS callback can also be implemented as a Python function, which "
"is then translated to JavaScript using PScript. This makes it easier for "
"users to define client-side interactions without having to learn "
"JavaScript. To use this functionality you need the PScript library "
"(install with ``conda install -c conda-forge pscript`` or ``pip install "
"pscript``)."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:243
msgid ""
"It is critical to note that **no python code is ever executed when a "
"CustomJS callback is used**. This is true even when the callback is "
"supplied as python code to be translated to JavaScript as described in "
"this section. A ``CustomJS`` callback is only executed inside a browser "
"JavaScript interpreter, and can only directly interact JavaScript data "
"and functions (e.g., BokehJS models)."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:250
msgid ""
"For more information about the subset of Python that is supported in "
"callbacks, see the `PScript documentation`_."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:253
msgid ""
"We recommend using ``window.x`` for variables specific to JavaScript to "
"avoid confusion and help static code analysis tools. You can add "
"``window`` as an argument to the callback function to help readability "
"(and pyflakes), as in the example below."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:293
msgid "OpenURL"
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:295
msgid ""
"Opening an URL when users click on a glyph (for instance a circle marker)"
" is a very popular feature. Bokeh lets users enable this feature by "
"exposing an OpenURL callback object that can be passed to a Tap tool in "
"order to have that action called whenever the users clicks on the glyph."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:300
msgid ""
"The following code shows how to use the OpenURL action combined with a "
"TapTool to open an URL whenever the user clicks on a circle."
msgstr ""

#: ../../source/docs/user_guide/interaction/callbacks.rst:306
msgid ""
"Please note that ``OpenURL`` callbacks specifically and only work with "
"``TapTool``, and are only invoked when a glyph is hit. That is, they do "
"not execute on every tap. If you would like to execute a callback on "
"every mouse tap, please see "
":ref:`userguide_interaction_jscallbacks_customjs_interactions`."
msgstr ""

