# SOME DESCRIPTIVE TITLE.
# Copyright (C) Â© Copyright 2015-2018, Anaconda and Bokeh Contributors.
# This file is distributed under the same license as the Bokeh package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Bokeh 1.1.0dev12-5-g50b404880\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-29 15:17+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/docs/reference/models/transforms.rst:4
msgid "bokeh.models.transforms"
msgstr ""

#: bokeh.models.transforms:1 of
msgid "Represent transformations of data to happen on the client (browser) side."
msgstr ""

#: bokeh.models.transforms.CustomJSTransform:1 bokeh.models.transforms.Dodge:1
#: bokeh.models.transforms.Interpolator:1 bokeh.models.transforms.Jitter:1 of
msgid "Bases: :class:`bokeh.models.transforms.Transform`"
msgstr ""

#: bokeh.models.transforms.CustomJSTransform:1 of
msgid "Apply a custom defined transform to data."
msgstr ""

#: bokeh.models.transforms.CustomJSTransform:4 of
msgid ""
"The explicit purpose of this Bokeh Model is to embed *raw JavaScript "
"code* for a browser to execute. If any part of the code is derived from "
"untrusted user inputs, then you must take appropriate care to sanitize "
"the user input prior to passing to Bokeh."
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"*property type:* :class:`~bokeh.core.properties.Dict` ( "
":class:`~bokeh.core.properties.String` , "
":class:`~bokeh.core.properties.AnyRef`  )"
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"A mapping of names to Python objects. In particular those can be bokeh's "
"models. These objects are made available to the transform' code snippet "
"as the values of named parameters to the callback."
msgstr ""

#: ../../<bokeh-prop>:1
msgid "*property type:* :class:`~bokeh.core.properties.String`"
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"A snippet of JavaScript code to transform a single value. The variable "
"``x`` will contain the untransformed value and can be expected to be "
"present in the function namespace at render time. The snippet will be "
"into the body of a function and therefore requires a return statement."
msgstr ""

#: ../../<bokeh-prop>:1
#: bokeh.models.transforms.CustomJSTransform.from_coffeescript:10
#: bokeh.models.transforms.CustomJSTransform.from_py_func:17 of
msgid "Example:"
msgstr ""

#: ../../<bokeh-prop>:1
msgid "*property type:* :class:`~bokeh.core.properties.Bool`"
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"Enables or disables automatic insertion of ``\"use strict\";`` into "
"``func`` or ``v_func``."
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"A snippet of JavaScript code to transform an array of values. The "
"variable ``xs`` will contain the untransformed array and can be expected "
"to be present in the function namespace at render time. The snippet will "
"be into the body of a function and therefore requires a return statement."
msgstr ""

#: ../../<bokeh-prop>:1
#: bokeh.models.transforms.CustomJSTransform.from_py_func:14 of
msgid ""
"The vectorized function, ``v_func``, must return an array of the same "
"length as the input ``xs`` array."
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_coffeescript:1 of
msgid ""
"Create a ``CustomJSTransform`` instance from a pair of CoffeeScript "
"snippets. The function bodies are translated to JavaScript functions "
"using node and therefore require return statements."
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_coffeescript:5 of
msgid ""
"The ``func`` snippet namespace will contain the variable ``x`` (the "
"untransformed value) at render time. The ``v_func`` snippet namespace "
"will contain the variable ``xs`` (the untransformed vector) at render "
"time."
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_coffeescript
#: bokeh.models.transforms.CustomJSTransform.from_py_func of
msgid "Parameters"
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_coffeescript:19 of
msgid "a coffeescript snippet to transform a single ``x`` value"
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_coffeescript:21 of
msgid "a coffeescript snippet function to transform a vector ``xs``"
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_coffeescript
#: bokeh.models.transforms.CustomJSTransform.from_py_func of
msgid "Returns"
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_coffeescript:24
#: bokeh.models.transforms.CustomJSTransform.from_py_func:36 of
msgid "CustomJSTransform"
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_py_func:1 of
msgid ""
"Create a ``CustomJSTransform`` instance from a pair of Python functions. "
"The function is translated to JavaScript using PScript."
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_py_func:4 of
msgid ""
"The python functions must have no positional arguments. It's possible to "
"pass Bokeh models (e.g. a ``ColumnDataSource``) as keyword arguments to "
"the functions."
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_py_func:8 of
msgid ""
"The ``func`` function namespace will contain the variable ``x`` (the "
"untransformed value) at render time. The ``v_func`` function namespace "
"will contain the variable ``xs`` (the untransformed vector) at render "
"time."
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_py_func:31 of
msgid "a scalar function to transform a single ``x`` value"
msgstr ""

#: bokeh.models.transforms.CustomJSTransform.from_py_func:33 of
msgid "a vectorized function to transform a vector ``xs``"
msgstr ""

#: bokeh.models.transforms.Dodge:1 of
msgid "Apply either fixed dodge amount to data."
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"*property type:* :class:`~bokeh.core.properties.Instance` ( "
":class:`~bokeh.models.ranges.Range`  )"
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"When applying ``Dodge`` to categorical data values, the corresponding "
"``FactorRange`` must be supplied as the ``range`` property."
msgstr ""

#: ../../<bokeh-prop>:1
msgid "*property type:* :class:`~bokeh.core.properties.Float`"
msgstr ""

#: ../../<bokeh-prop>:1
msgid "The amount to dodge the input data."
msgstr ""

#: bokeh.models.transforms.Interpolator:1 of
msgid "Base class for interpolator transforms."
msgstr ""

#: bokeh.models.transforms.Interpolator:3 of
msgid ""
"Interpolators return the value of a function which has been evaluated "
"between specified (x, y) pairs of data.  As an example, if two control "
"point pairs were provided to the interpolator, a linear interpolaction at"
" a specific value of 'x' would result in the value of 'y' which existed "
"on the line connecting the two control points."
msgstr ""

#: bokeh.models.transforms.Interpolator:9 of
msgid ""
"The control point pairs for the interpolators can be specified through "
"either"
msgstr ""

#: bokeh.models.transforms.Interpolator:11 of
msgid "A literal sequence of values:"
msgstr ""

#: bokeh.models.transforms.Interpolator:17 of
msgid "or a pair of columns defined in a ``ColumnDataSource`` object:"
msgstr ""

#: bokeh.models.transforms.Interpolator:24 of
msgid ""
"This is the base class and is not intended to end use.  Please see the "
"documentation for the final derived classes (``Jitter``, "
"``LineraInterpolator``, ``StepInterpolator``) for more information on "
"their specific methods of interpolation."
msgstr ""

#: bokeh.models.transforms.Interpolator:31 bokeh.models.transforms.Transform:16
#: of
msgid ""
"This is an abstract base class used to help organize the hierarchy of "
"Bokeh model types. **It is not useful to instantiate on its own.**"
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"Determine if the interpolation should clip the result to include only "
"values inside its predefined range. If this is set to False, it will "
"return the most value of the closest point."
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"*property type:* :class:`~bokeh.core.properties.Instance` ( "
":class:`~bokeh.models.sources.ColumnarDataSource`  )"
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"Data which defines the source for the named columns if a string is passed"
" to either the ``x`` or ``y`` parameters."
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"*property type:* :class:`~bokeh.core.properties.Either` ( "
":class:`~bokeh.core.properties.String` , "
":class:`~bokeh.core.properties.Seq` ( "
":class:`~bokeh.core.properties.Float`  ) )"
msgstr ""

#: ../../<bokeh-prop>:1
msgid "Independent coordinate denoting the location of a point."
msgstr ""

#: ../../<bokeh-prop>:1
msgid "Dependant coordinate denoting the value of a point at a location."
msgstr ""

#: bokeh.models.transforms.Jitter:1 of
msgid "Apply either a uniform or normally sampled random jitter to data."
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"*property type:* :class:`~bokeh.core.properties.Enum` ( "
":class:`~bokeh.core.enums.JitterRandomDistribution`  )"
msgstr ""

#: ../../<bokeh-prop>:1
msgid "The random distribution upon which to pull the random scatter"
msgstr ""

#: ../../<bokeh-prop>:1
msgid "The central value for the random sample"
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"When applying Jitter to Categorical data values, the corresponding "
"``FactorRange`` must be supplied as the ``range`` property."
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"The width (absolute for uniform distribution and sigma for the normal "
"distribution) of the random sample."
msgstr ""

#: bokeh.models.transforms.LinearInterpolator:1
#: bokeh.models.transforms.StepInterpolator:1 of
msgid "Bases: :class:`bokeh.models.transforms.Interpolator`"
msgstr ""

#: bokeh.models.transforms.LinearInterpolator:1 of
msgid ""
"Compute a linear interpolation between the control points provided "
"through the ``x``, ``y``, and ``data`` parameters."
msgstr ""

#: bokeh.models.transforms.StepInterpolator:1 of
msgid ""
"Compute a step-wise interpolation between the points provided through the"
" ``x``, ``y``, and ``data`` parameters."
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"*property type:* :class:`~bokeh.core.properties.Enum` ( "
":class:`~bokeh.core.enums.StepMode`  )"
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"Adjust the behavior of the returned value in relation to the control "
"points.  The parameter can assume one of three values:"
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"``after`` (default): Assume the y-value associated with the nearest "
"x-value which is less than or equal to the point to transform."
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"``before``: Assume the y-value associated with the nearest x-value which "
"is greater than the point to transform."
msgstr ""

#: ../../<bokeh-prop>:1
msgid ""
"``center``: Assume the y-value associated with the nearest x-value to the"
" point to transform."
msgstr ""

#: bokeh.models.transforms.Transform:1 of
msgid "Bases: :class:`bokeh.model.Model`"
msgstr ""

#: bokeh.models.transforms.Transform:1 of
msgid ""
"Base class for ``Transform`` models that represent a computation to be "
"carried out on the client-side."
msgstr ""

#: bokeh.models.transforms.Transform:4 of
msgid "JavaScript implementations should implement the following methods:"
msgstr ""

