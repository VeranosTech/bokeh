# SOME DESCRIPTIVE TITLE.
# Copyright (C) Â© Copyright 2015-2018, Anaconda and Bokeh Contributors.
# This file is distributed under the same license as the Bokeh package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Bokeh 1.1.0dev12-5-g50b404880\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-29 15:17+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/docs/reference/application/application.rst:4
msgid "bokeh.application.application"
msgstr ""

#: bokeh.application.application:1 of
msgid "Provide the ``Application`` class."
msgstr ""

#: bokeh.application.application:3 of
msgid "Application instances are factories for creating new Bokeh Documents."
msgstr ""

#: bokeh.application.application:5 of
msgid ""
"When a Bokeh server session is initiated, the Bokeh server asks the "
"Application for a new Document to service the session. To do this, the "
"Application first creates a new empty Document, then it passes this new "
"Document to the ``modify_document`` method of each of its handlers. When "
"all handlers have updated the Document, it is used to service the user "
"session."
msgstr ""

#: bokeh.application.application.Application:1 of
msgid "An Application is a factory for Document instances."
msgstr ""

#: bokeh.application.application.Application.__init__:1 of
msgid "Application factory."
msgstr ""

#: bokeh.application.application.Application.__init__
#: bokeh.application.application.Application.add
#: bokeh.application.application.ServerContext.add_next_tick_callback
#: bokeh.application.application.ServerContext.add_periodic_callback
#: bokeh.application.application.ServerContext.add_timeout_callback
#: bokeh.application.application.ServerContext.remove_next_tick_callback
#: bokeh.application.application.ServerContext.remove_periodic_callback
#: bokeh.application.application.ServerContext.remove_timeout_callback
#: bokeh.application.application.SessionContext.with_locked_document of
msgid "Parameters"
msgstr ""

#: bokeh.application.application.Application.__init__:3 of
msgid "List of handlers to call. The URL is taken from the first one only."
msgstr ""

#: bokeh.application.application.Application.__init__ of
msgid "Keyword Arguments"
msgstr ""

#: bokeh.application.application.Application.__init__:7 of
msgid ""
"arbitrary user-supplied JSON data to make available with the application."
"  The server will provide a URL ``http://applicationurl/metadata`` which "
"returns a JSON blob of the form:  .. code-block:: json      {         "
"\"data\": {             \"hi\": \"hi\",             \"there\": \"there\""
"         },         \"url\": \"/myapp\"     }  The user-supplied metadata"
" is returned as-is under the ``\"data\"`` key in the blob."
msgstr ""

#: bokeh.application.application.Application.__init__:7 of
msgid "arbitrary user-supplied JSON data to make available with the application."
msgstr ""

#: bokeh.application.application.Application.__init__:10 of
msgid ""
"The server will provide a URL ``http://applicationurl/metadata`` which "
"returns a JSON blob of the form:"
msgstr ""

#: bokeh.application.application.Application.__init__:23 of
msgid ""
"The user-supplied metadata is returned as-is under the ``\"data\"`` key "
"in the blob."
msgstr ""

#: bokeh.application.application.Application.add:1 of
msgid "Add a handler to the pipeline used to initialize new documents."
msgstr ""

#: bokeh.application.application.Application.add:3 of
msgid "a handler for this Application to use to process Documents"
msgstr ""

#: bokeh.application.application.Application.create_document:1 of
msgid "Creates and initializes a document using the Application's handlers."
msgstr ""

#: bokeh.application.application.Application.initialize_document:1 of
msgid "Fills in a new document using the Application's handlers."
msgstr ""

#: bokeh.application.application.Application.on_server_loaded:1
#: bokeh.application.application.Application.on_session_created:1 of
msgid "Invoked to execute code when a new session is created."
msgstr ""

#: bokeh.application.application.Application.on_server_loaded:3 of
msgid ""
"This method calls ``on_server_loaded`` on each handler, in order, with "
"the server context passed as the only argument."
msgstr ""

#: bokeh.application.application.Application.on_server_unloaded:1 of
msgid ""
"Invoked to execute code when the server cleanly exits. (Before stopping "
"the server's ``IOLoop``.)"
msgstr ""

#: bokeh.application.application.Application.on_server_unloaded:4 of
msgid ""
"This method calls ``on_server_unloaded`` on each handler, in order, with "
"the server context passed as the only argument."
msgstr ""

#: bokeh.application.application.Application.on_server_unloaded:8 of
msgid ""
"In practice this code may not run, since servers are often killed by a "
"signal."
msgstr ""

#: bokeh.application.application.Application.on_session_created:3 of
msgid ""
"This method calls ``on_session_created`` on each handler, in order, with "
"the session context passed as the only argument."
msgstr ""

#: bokeh.application.application.Application.on_session_created:6 of
msgid ""
"May return a ``Future`` which will delay session creation until the "
"``Future`` completes."
msgstr ""

#: bokeh.application.application.Application.on_session_destroyed:1 of
msgid "Invoked to execute code when a session is destroyed."
msgstr ""

#: bokeh.application.application.Application.on_session_destroyed:3 of
msgid ""
"This method calls ``on_session_destroyed`` on each handler, in order, "
"with the session context passed as the only argument."
msgstr ""

#: bokeh.application.application.Application.on_session_destroyed:6 of
msgid "Afterwards, ``session_context.destroyed`` will be ``True``."
msgstr ""

#: bokeh.application.application.Application.handlers:1 of
msgid "The ordered list of handlers this Application is configured with."
msgstr ""

#: bokeh.application.application.Application.metadata:1 of
msgid "Arbitrary user-supplied metadata to associate with this application."
msgstr ""

#: bokeh.application.application.Application.static_path:1 of
msgid "Path to any (optional) static resources specified by handlers."
msgstr ""

#: bokeh.application.application.ServerContext:1 of
msgid ""
"A harness for server-specific information and tasks related to "
"collections of Bokeh sessions."
msgstr ""

#: bokeh.application.application.ServerContext:4
#: bokeh.application.application.SessionContext:4 of
msgid "*This base class is probably not of interest to general users.*"
msgstr ""

#: bokeh.application.application.ServerContext.add_next_tick_callback:1 of
msgid "Add a callback to be run on the next tick of the event loop."
msgstr ""

#: bokeh.application.application.ServerContext.add_next_tick_callback:3
#: bokeh.application.application.ServerContext.add_periodic_callback:3
#: bokeh.application.application.ServerContext.add_timeout_callback:3
#: bokeh.application.application.ServerContext.remove_next_tick_callback:4
#: bokeh.application.application.ServerContext.remove_periodic_callback:3
#: bokeh.application.application.ServerContext.remove_timeout_callback:4
#: bokeh.application.application.ServerContext.sessions:3
#: bokeh.application.application.SessionContext.with_locked_document:4 of
msgid "*Subclasses must implement this method.*"
msgstr ""

#: bokeh.application.application.ServerContext.add_next_tick_callback:5 of
msgid ""
"a callback to add  The callback will execute on the next tick of the "
"event loop, and should have the form ``def callback()`` (i.e. it should "
"not accept any arguments)"
msgstr ""

#: bokeh.application.application.ServerContext.add_next_tick_callback:5
#: bokeh.application.application.ServerContext.add_periodic_callback:5
#: bokeh.application.application.ServerContext.add_timeout_callback:5 of
msgid "a callback to add"
msgstr ""

#: bokeh.application.application.ServerContext.add_next_tick_callback:7 of
msgid ""
"The callback will execute on the next tick of the event loop, and should "
"have the form ``def callback()`` (i.e. it should not accept any "
"arguments)"
msgstr ""

#: bokeh.application.application.ServerContext.add_next_tick_callback
#: bokeh.application.application.ServerContext.add_periodic_callback
#: bokeh.application.application.ServerContext.add_timeout_callback
#: bokeh.application.application.SessionContext.with_locked_document of
msgid "Returns"
msgstr ""

#: bokeh.application.application.ServerContext.add_next_tick_callback:12 of
msgid "an ID that can be used with ``remove_next_tick_callback``."
msgstr ""

#: bokeh.application.application.ServerContext.add_periodic_callback:1 of
msgid "Add a callback to be run periodically until it is removed."
msgstr ""

#: bokeh.application.application.ServerContext.add_periodic_callback:5 of
msgid ""
"a callback to add  The callback will execute periodically on the event "
"loop as specified, and should have the form ``def callback()`` (i.e. it "
"should not accept any arguments)"
msgstr ""

#: bokeh.application.application.ServerContext.add_periodic_callback:7 of
msgid ""
"The callback will execute periodically on the event loop as specified, "
"and should have the form ``def callback()`` (i.e. it should not accept "
"any arguments)"
msgstr ""

#: bokeh.application.application.ServerContext.add_periodic_callback:11 of
msgid "number of milliseconds to wait between executing the callback."
msgstr ""

#: bokeh.application.application.ServerContext.add_periodic_callback:15 of
msgid "an ID that can be used with ``remove_periodic_callback``."
msgstr ""

#: bokeh.application.application.ServerContext.add_timeout_callback:1 of
msgid "Add a callback to be run once after timeout_milliseconds."
msgstr ""

#: bokeh.application.application.ServerContext.add_timeout_callback:5 of
msgid ""
"a callback to add  The callback will execute once on the event loop after"
" the timeout has passed, and should have the form ``def callback()`` "
"(i.e. it should not accept any arguments)"
msgstr ""

#: bokeh.application.application.ServerContext.add_timeout_callback:7 of
msgid ""
"The callback will execute once on the event loop after the timeout has "
"passed, and should have the form ``def callback()`` (i.e. it should not "
"accept any arguments)"
msgstr ""

#: bokeh.application.application.ServerContext.add_timeout_callback:11 of
msgid "number of milliseconds to wait before executing the callback."
msgstr ""

#: bokeh.application.application.ServerContext.add_timeout_callback:15 of
msgid "an ID that can be used with ``remove_timeout_callback``."
msgstr ""

#: bokeh.application.application.ServerContext.remove_next_tick_callback:1 of
msgid "Remove a callback added with ``add_next_tick_callback``, before it runs."
msgstr ""

#: bokeh.application.application.ServerContext.remove_next_tick_callback:6 of
msgid "the ID returned from ``add_next_tick_callback``"
msgstr ""

#: bokeh.application.application.ServerContext.remove_periodic_callback:1 of
msgid "Removes a callback added with ``add_periodic_callback``."
msgstr ""

#: bokeh.application.application.ServerContext.remove_periodic_callback:5 of
msgid "the ID returned from ``add_periodic_callback``"
msgstr ""

#: bokeh.application.application.ServerContext.remove_timeout_callback:1 of
msgid "Remove a callback added with ``add_timeout_callback``, before it runs."
msgstr ""

#: bokeh.application.application.ServerContext.remove_timeout_callback:6 of
msgid "the ID returned from ``add_timeout_callback``"
msgstr ""

#: bokeh.application.application.ServerContext.sessions:1 of
msgid "``SessionContext`` instances belonging to this application."
msgstr ""

#: bokeh.application.application.SessionContext:1 of
msgid ""
"A harness for server-specific information and tasks related to Bokeh "
"sessions."
msgstr ""

#: bokeh.application.application.SessionContext.with_locked_document:1 of
msgid ""
"Runs a function with the document lock held, passing the document to the "
"function."
msgstr ""

#: bokeh.application.application.SessionContext.with_locked_document:6 of
msgid ""
"function that takes a single parameter (the Document) and returns "
"``None`` or a ``Future``"
msgstr ""

#: bokeh.application.application.SessionContext.with_locked_document:10 of
msgid "a ``Future`` containing the result of the function"
msgstr ""

#: bokeh.application.application.SessionContext.destroyed:1 of
msgid "If ``True``, the session has been discarded and cannot be used."
msgstr ""

#: bokeh.application.application.SessionContext.destroyed:3 of
msgid ""
"A new session with the same ID could be created later but this instance "
"will not come back to life."
msgstr ""

#: bokeh.application.application.SessionContext.id:1 of
msgid "The unique ID for the session associated with this context."
msgstr ""

#: bokeh.application.application.SessionContext.server_context:1 of
msgid "The server context for this session context"
msgstr ""

