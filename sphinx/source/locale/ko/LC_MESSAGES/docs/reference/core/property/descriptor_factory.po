# SOME DESCRIPTIVE TITLE.
# Copyright (C) Â© Copyright 2015-2018, Anaconda and Bokeh Contributors.
# This file is distributed under the same license as the Bokeh package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Bokeh 1.1.0dev12-5-g50b404880\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-29 15:17+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/docs/reference/core/property/descriptor_factory.rst:4
msgid "bokeh.core.property.descriptor_factory"
msgstr ""

#: bokeh.core.property.descriptor_factory:1 of
msgid "Provide a Base class for all Bokeh properties."
msgstr ""

#: bokeh.core.property.descriptor_factory:3 of
msgid ""
"Bokeh properties work by contributing Python descriptor objects to "
"``HasProps`` classes. These descriptors then delegate attribute access "
"back to the Bokeh property class, which handles validation, "
"serialization, and documentation needs."
msgstr ""

#: bokeh.core.property.descriptor_factory:8 of
msgid ""
"The ``PropertyDescriptorFactory`` class provides two methods "
"``autocreate`` and ``make_descriptors`` that are used by the metaclass "
"``MetaHasProps`` during class creation to create and install the "
"necessary descriptors corresponding to the declared properties."
msgstr ""

#: bokeh.core.property.descriptor_factory:13 of
msgid ""
"This machinery helps to make Bokeh much more user friendly. For example, "
"the DataSpec properties mediate between fixed values and references to "
"column data source columns. A user can use a very simple syntax, and the "
"property will correctly serialize and validate automatically:"
msgstr ""

#: bokeh.core.property.descriptor_factory:30 of
msgid ""
"There are many other examples like this throughout Bokeh. In this way "
"users may operate simply and naturally, and not be concerned with the "
"low-level details around validation, serialization, and documentation."
msgstr ""

#: bokeh.core.property.descriptor_factory:35 of
msgid ""
"These classes form part of the very low-level machinery that implements "
"the Bokeh model and property system. It is unlikely that any of these "
"classes or their methods will be applicable to any standard usage or to "
"anyone who is not directly developing on Bokeh's own infrastructure."
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory:1 of
msgid "Base class for all Bokeh properties."
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory:3 of
msgid ""
"A Bokeh property really consist of two parts: the familiar \"property\" "
"portion, such as ``Int``, ``String``, etc., as well as an associated "
"Python descriptor that delegates attribute access (e.g. ``range.start``) "
"to the property instance."
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory:8 of
msgid "Consider the following class definition:"
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory:18 of
msgid "Then we can observe the following:"
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory.autocreate:1
#: of
msgid ""
"Called by the ``MetaHasProps`` metaclass to create a new instance of this"
" descriptor when the property is assigned using only the property type. "
"For example:"
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory.make_descriptors:1
#: of
msgid ""
"Return a list of ``PropertyDescriptor`` instances to install on a class, "
"in order to delegate attribute access to this property."
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory.make_descriptors
#: of
msgid "Parameters"
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory.make_descriptors:4
#: of
msgid "the name of the property these descriptors are for"
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory.make_descriptors
#: of
msgid "Returns"
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory.make_descriptors:7
#: of
msgid "list[PropertyDescriptor]"
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory.make_descriptors:9
#: of
msgid ""
"The descriptors returned are collected by the ``MetaHasProps`` metaclass "
"and added to ``HasProps`` subclasses during class creation."
msgstr ""

#: bokeh.core.property.descriptor_factory.PropertyDescriptorFactory.make_descriptors:12
#: of
msgid ""
"Subclasses of ``PropertyDescriptorFactory`` are responsible for "
"implementing this function to return descriptors specific to their needs."
msgstr ""

